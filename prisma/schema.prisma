// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    username                 String?  @unique
    password                 String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    exchange                 Exchange @relation(fields: [exchangeId], references: [id])
    exchangeId               String   @unique

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String?
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exchange {
    id               String             @id @default(cuid())
    exchangeName     String             @unique
    accountId        String?
    Account          Account?
    Funds            Funds[]
    Transactions     Transactions[]
    FavoriteCustomer FavoriteCustomer[]
}

model Funds {
    id         String   @id @default(cuid())
    currency   String
    amount     Decimal
    exchangeId String
    Exchange   Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)

    @@unique([exchangeId, currency])
}

model Transactions {
    id                 String            @id @default(cuid())
    amount             Decimal
    currencySold       String
    currencyBought     String
    exchangeRate       Decimal
    date               DateTime
    favoriteCustomerId String?
    FavoriteCustomer   FavoriteCustomer? @relation(fields: [favoriteCustomerId], references: [id], onDelete: Cascade)

    exchangeId String
    Exchange   Exchange @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
}

model FavoriteCustomer {
    id           String         @id @default(cuid())
    firstName    String
    lastName     String
    phone        String
    transactions Transactions[]
    exchangeId   String
    Exchange     Exchange       @relation(fields: [exchangeId], references: [id], onDelete: Cascade)
}
